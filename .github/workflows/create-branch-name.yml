name: "identify branch name"

on:
  create:
jobs:
  get-branch-name:
    name: feature branch name
    if: contains('${{ github.ref }}', 'feat/')
    runs-on: ubuntu-latest
    outputs:
      branch_name: ${{ steps.branch_name.outputs.branch }}
    steps:
      - name: Extract short branch name
        id: branch_name
        run: echo "::set-output name=branch::$(echo ${GITHUB_REF##*/})"
      - name: Get branch names
        uses: tj-actions/branch-names@v7
  tf-run-dev-feature:
    needs: get-branch-name
    name: create terraform workspace for feature branch
    runs-on: unbuntu-latest
    env:
      TF_CLOUD_ORGANIZATION: "VitessePSP"
      TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
      TF_WORKSPACE: "learn-terraform-github-actions"
      CONFIG_DIRECTORY: "./"
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init
        working-directory: ${{ env.DIR }}
        # may require @version number in the from-module
        run: |
          eval `ssh-agent -s`
          ssh-add - <<< '${{ secrets.SSH_KEY_GITHUB_ACTIONS }}'
          terraform init -from-module=app.terraform.io/vitessepsp/databricks-jobs/analytics

      # Run a terraform fmt to check syntax
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      # Run a terraform validate
      - name: Terraform Validate
        id: validate
        # Run even if formatting fails
        if: success() || failure()
        run: terraform validate -no-color

      - name: Terraform Apply
        run: terraform apply -input=false tfplan
